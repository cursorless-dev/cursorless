spokenForm: bring line bat past end of funk to this
languageId: typescript
command:
  actionName: replaceWithTarget
  partialTargets:
    - type: range
      start:
        type: primitive
        selectionType: line
        mark: {type: decoratedSymbol, symbolColor: default, character: b}
      end:
        type: primitive
        position: after
        insideOutsideType: inside
        modifier: {type: containingScope, scopeType: namedFunction, includeSiblings: false}
      excludeStart: false
      excludeEnd: false
    - type: primitive
      mark: {type: cursor}
  extraArgs: []
marks:
  default.b:
    start: {line: 1, character: 8}
    end: {line: 1, character: 11}
initialState:
  documentContents: |
    function foo() {
      const bar = "hello";

      const baz = "hi";
    }

    const bongo = "bazman";
  selections:
    - anchor: {line: 6, character: 20}
      active: {line: 6, character: 20}
finalState:
  documentContents: |
    function foo() {
      const bar = "hello";

      const baz = "hi";
    }

    const bar = "hello";

      const baz = "hi";
    }
  selections:
    - anchor: {line: 6, character: 20}
      active: {line: 6, character: 20}
  thatMark:
    - anchor: {line: 6, character: 0}
      active: {line: 9, character: 1}
  sourceMark:
    - anchor: {line: 1, character: 2}
      active: {line: 4, character: 1}
fullTargets: [{type: range, excludeAnchor: false, excludeActive: false, anchor: {type: primitive, mark: {type: decoratedSymbol, symbolColor: default, character: b}, selectionType: line, position: contents, insideOutsideType: null, modifier: {type: identity}}, active: {type: primitive, mark: {type: decoratedSymbol, symbolColor: default, character: b}, selectionType: token, position: after, insideOutsideType: inside, modifier: {type: containingScope, scopeType: namedFunction, includeSiblings: false}}}, {type: primitive, mark: {type: cursor}, selectionType: line, position: contents, insideOutsideType: null, modifier: {type: identity}}]
