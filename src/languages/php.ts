import { SyntaxNode } from "web-tree-sitter";
import {
  createPatternMatchers,
} from "../util/nodeMatchers";
import { NodeMatcherAlternative, ScopeType } from "../typings/Types";

// Generated by the following command:
// > curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-php/0ce134234214427b6aeb2735e93a307881c6cd6f/src/node-types.json \
//   | jq '[.[] | select(.type == "_statement") | .subtypes[].type]'
const STATEMENT_TYPES = [
  "break_statement",
  "class_declaration",
  "compound_statement",
  "const_declaration",
  "continue_statement",
  "declare_statement",
  "do_statement",
  "echo_statement",
  "empty_statement",
  "enum_declaration",
  "expression_statement",
  "for_statement",
  "foreach_statement",
  "function_definition",
  "function_static_declaration",
  "global_declaration",
  "goto_statement",
  "if_statement",
  "interface_declaration",
  "named_label_statement",
  "namespace_definition",
  "namespace_use_declaration",
  "return_statement",
  "switch_statement",
  "trait_declaration",
  "try_statement",
  "unset_statement",
  "while_statement"
];

export const getTypeNode = (node: SyntaxNode) =>
  node.children.find((child) => child.type === "type") ?? null;

const nodeMatchers: Partial<Record<ScopeType, NodeMatcherAlternative>> = {
  statement: STATEMENT_TYPES,
  class: "class_declaration",
  className: "class_declaration[name]",
  comment: "comment",
};

export default createPatternMatchers(nodeMatchers);
