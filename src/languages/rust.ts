import { SimpleScopeTypeType } from "../typings/targetDescriptor.types";
import { NodeMatcherAlternative } from "../typings/Types";
import { patternFinder } from "../util/nodeFinders";
import {
  ancestorChainNodeMatcher,
  argumentMatcher,
  cascadingMatcher,
  createPatternMatchers,
  leadingMatcher,
  patternMatcher,
  trailingMatcher,
} from "../util/nodeMatchers";

// Generated by the following command:
// `curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-rust/36ae187ed6dd3803a8a89dbb54f3124c8ee74662/src/node-types.json | jq '[.[] | select(.type == "_declaration_statement") | .subtypes[].type, "expression_statement"]'`
const STATEMENT_TYPES = [
  "associated_type",
  "attribute_item",
  "const_item",
  "empty_statement",
  "enum_item",
  "extern_crate_declaration",
  "foreign_mod_item",
  "function_item",
  "function_signature_item",
  "impl_item",
  "inner_attribute_item",
  "let_declaration",
  "macro_definition",
  "macro_invocation",
  "mod_item",
  "static_item",
  "struct_item",
  "trait_item",
  "type_item",
  "union_item",
  "use_declaration",
  "expression_statement",
];

/**
 * Scope types allowed to be parents of a statement
 */
const STATEMENT_PARENT_TYPES = ["source_file", "block", "declaration_list"];

const nodeMatchers: Partial<
  Record<SimpleScopeTypeType, NodeMatcherAlternative>
> = {
  statement: ancestorChainNodeMatcher(
    [
      patternFinder(...STATEMENT_PARENT_TYPES),
      patternFinder(...STATEMENT_TYPES),
    ],
    1
  ),
  string: ["raw_string_literal", "string_literal"],
  ifStatement: "if_expression",
  functionCall: ["call_expression", "macro_invocation", "struct_expression"],
  comment: ["line_comment", "block_comment"],
  list: "array_expression",
  collectionItem: argumentMatcher("array_expression"),
  namedFunction: "function_item",
  type: cascadingMatcher(
    leadingMatcher(
      [
        "let_declaration[type]",
        "parameter[type]",
        "field_declaration[type]",

      ],
      [":"]
    ),
    leadingMatcher(["function_item[return_type]"], ["->"]),
    patternMatcher("struct_item", "trait_item", "impl_item", "impl_item[type]"),
  ),
  functionName: ["function_item[name]"],
  anonymousFunction: "closure_expression",
  argumentOrParameter: cascadingMatcher(
    argumentMatcher("arguments"),
    trailingMatcher(["parameter"], [","]),
    trailingMatcher(["self_parameter"], [","])
  ),
  name: ["let_declaration.identifier!", "parameter.identifier!"],
  class: ["struct_item", "struct_expression"],
  value: ["let_declaration[value]"],
};

export default createPatternMatchers(nodeMatchers);
