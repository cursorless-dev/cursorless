{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Snippets for use in cursorless",
  "type": "object",
  "additionalProperties": {
    "type": "object",
    "properties": {
      "definitions": {
        "type": "array",
        "descriptions": "List of possible definitions for this snippet",
        "items": {
          "type": "object",
          "properties": {
            "scope": {
              "type": "object",
              "description": "Scopes where this snippet is active",
              "properties": {
                "langIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "VSCode language ids where this snippet definition should be active"
                },
                "scopeTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/scopeType"
                  },
                  "description": "Cursorless scopes in which this snippet is active.  Allows, for example, to have different snippets to define a function if you're in a class or at global scope."
                },
                "excludeDescendantScopeTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/scopeType"
                  },
                  "description": "Exclude regions of scopeTypes that are descendants of these scope types.  For example, if you have a snippet that should be active in a class but not in a function within the class, you can specify `scopeTypes: [\"class\"], excludeDescendantScopeTypes: [\"namedFunction\"]`"
                }
              },
              "additionalProperties": false
            },
            "body": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Inline snippet text using VSCode snippet syntax; entries joined by newline.  Named variables of the form `$foo` can be used as placeholders"
            },
            "variables": {
              "$ref": "#/$defs/variables",
              "description": "Scope-specific overrides for the variables defined in the snippet"
            }
          },
          "additionalProperties": false,
          "required": ["body"]
        }
      },
      "variables": {
        "$ref": "#/$defs/variables",
        "description": "For each named variable in the snippet, provides extra information about the variable."
      },
      "description": {
        "type": "string",
        "description": "Description of the snippet"
      },
      "insertionScopeTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/scopeType"
        },
        "description": "Try to expand target to this scope type when inserting this snippet before/after a target without scope type specified. If multiple scope types are specified try them each in order until one of them matches."
      }
    },
    "additionalProperties": false
  },
  "$defs": {
    "scopeType": {
      "type": "string",
      "enum": [
        "argumentOrParameter",
        "anonymousFunction",
        "attribute",
        "branch",
        "class",
        "className",
        "collectionItem",
        "collectionKey",
        "comment",
        "functionCall",
        "functionName",
        "ifStatement",
        "list",
        "map",
        "name",
        "namedFunction",
        "regularExpression",
        "statement",
        "string",
        "switchStatementSubject",
        "type",
        "value",
        "condition",
        "section",
        "sectionLevelOne",
        "sectionLevelTwo",
        "sectionLevelThree",
        "sectionLevelFour",
        "sectionLevelFive",
        "sectionLevelSix",
        "selector",
        "xmlBothTags",
        "xmlElement",
        "xmlEndTag",
        "xmlStartTag",
        "token",
        "line",
        "notebookCell",
        "paragraph",
        "document",
        "character",
        "word",
        "nonWhitespaceSequence",
        "url"
      ]
    },
    "variables": {
      "type": "object",
      "description": "For each named variable in the snippet, provides extra information about the variable.",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "wrapperScopeType": {
            "$ref": "#/$defs/scopeType",
            "description": "Default to this scope type when wrapping a target without scope type specified"
          },
          "description": {
            "type": "string",
            "description": "Description of the snippet variable"
          },
          "formatter": {
            "type": "string",
            "description": "Format text inserted into this variable using the given formatter",
            "enum": ["camelCase", "pascalCase", "snakeCase", "upperSnakeCase"]
          }
        },
        "additionalProperties": false
      }
    }
  }
}
