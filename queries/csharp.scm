;; https://github.com/tree-sitter/tree-sitter-c-sharp/blob/master/src/grammar.json

;; Generated by the following command:
;; > curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-c-sharp/master/src/node-types.json \
;;   | jq '.[] | select(.type == "_statement" or .type == "_declaration") | [.subtypes[].type]'
[
  (class_declaration)
  (constructor_declaration)
  (conversion_operator_declaration)
  (delegate_declaration)
  (destructor_declaration)
  (enum_declaration)
  (event_declaration)
  (event_field_declaration)
  (field_declaration)
  (indexer_declaration)
  (interface_declaration)
  (method_declaration)
  (namespace_declaration)
  (operator_declaration)
  (property_declaration)
  (record_declaration)
  (struct_declaration)
  (using_directive)
  (block)
  (break_statement)
  (checked_statement)
  (continue_statement)
  (do_statement)
  (empty_statement)
  (expression_statement)
  (fixed_statement)
  (for_each_statement)
  (for_statement)
  (goto_statement)
  (if_statement)
  (labeled_statement)
  (local_declaration_statement)
  (local_function_statement)
  (lock_statement)
  (return_statement)
  (switch_statement)
  (throw_statement)
  (try_statement)
  (unsafe_statement)
  (using_statement)
  (while_statement)
  (yield_statement)
] @statement

(if_statement) @ifStatement

(class_declaration
  name: (identifier) @className
) @class @_.domain
(compilation_unit) @class.iteration @className.iteration
;; Treat interior of all bodies as iteration scopes for class and classname, eg
;;!! private static void foo() {   }
;;!                             ***
(_
  body: (_
    .
    "{" @class.iteration.start.endOf @className.iteration.start.endOf
    "}" @class.iteration.end.startOf @className.iteration.end.startOf
    .
  )
)

(
  (string_literal) @string @textFragment
  (#child-range! @textFragment 0 -1 true true)
)
(comment) @comment @textFragment

(lambda_expression) @anonymousFunction

[
  (delegate_declaration
    name: (_) @functionName
  )
  (local_function_statement
    name: (_) @functionName
  )
  (method_declaration
    name: (_) @functionName
  )
  (constructor_declaration
    name: (_) @functionName
  )
] @namedFunction @functionName.domain

[
  (invocation_expression)
  (object_creation_expression)
] @functionCall

[
  (invocation_expression
    function: (_) @functionCallee
  )
  (object_creation_expression
    "new" @functionCallee.start
    type: (_) @functionCallee.end
  )
] @_.domain

(switch_statement
  (tuple_expression) @private.switchStatementSubject
) @_.domain
(switch_statement
  value: (_) @private.switchStatementSubject
) @_.domain

(_
  condition: (_) @condition
) @_.domain
(while_statement
  .
  (_) @condition
) @_.domain
(do_statement
  "while"
  .
  (_) @condition
) @_.domain
(switch_section
  (case_switch_label
    .
    (_) @condition
  )
) @_.domain

(switch_statement
  body: (switch_body
    "{" @condition.iteration.start.endOf
    "}" @condition.iteration.end.startOf
  )
)

(object_creation_expression
  initializer: (_) @map @list
)

(implicit_object_creation_expression
  (initializer_expression) @map
)

(array_creation_expression
  (initializer_expression) @list
)
(implicit_array_creation_expression
  (initializer_expression) @list
)
(implicit_stack_alloc_array_creation_expression
  (initializer_expression) @list
)
(stack_alloc_array_creation_expression
  (initializer_expression) @list
)

;;!! FirstName = "Craig"
;;!  ^^^^^^^^^
(initializer_expression
  (assignment_expression
    left: (_) @collectionKey
  ) @_.domain
)
(initializer_expression
  "{" @collectionKey.iteration.start.endOf @value.iteration.start.endOf
  "}" @collectionKey.iteration.end.startOf @value.iteration.end.startOf
)

;;!! String aaa;
;;!         ^^^
(variable_declaration
  (variable_declarator
    (identifier) @name
  )
) @_.domain

;;!! String aaa = "bbb";
;;!         ^^^
(variable_declaration
  (variable_declarator
    (identifier) @name @value.leading.endOf
    (equals_value_clause
      (_) @value
    )
  )
) @_.domain

(
  (variable_declarator
    (identifier) @name
  ) @_.domain
  (#not-parent-type? @_.domain variable_declaration)
)

(
  (variable_declarator
    (identifier) @name @value.leading.endOf
    (equals_value_clause
      (_) @value
    )
  ) @_.domain
  (#not-parent-type? @_.domain variable_declaration)
)

;;!! aaa = "bbb";
;;!  ^^^
;;!! foo = 2;
;;!        ^
(assignment_expression
  left: (_) @name @value.leading.endOf
  right: (_) @value
) @_.domain

(_
  name: (_) @name
) @_.domain

(_
  type: (_) @type
) @_.domain

;;!! def foo(name) {}
;;!          ^^^^
(
  (parameter_list
    (_)? @_.leading.endOf
    .
    (_) @argumentOrParameter
    .
    (_)? @_.trailing.startOf
  ) @_dummy
  (#not-type? @argumentOrParameter "comment")
  (#single-or-multi-line-delimiter! @argumentOrParameter @_dummy ", " ",\n")
)

;;!! foo("bar")
;;!      ^^^^^
(
  (argument_list
    (_)? @_.leading.endOf
    .
    (_) @argumentOrParameter
    .
    (_)? @_.trailing.startOf
  ) @_dummy
  (#not-type? @argumentOrParameter "comment")
  (#single-or-multi-line-delimiter! @argumentOrParameter @_dummy ", " ",\n")
)

;;!! int value = 5
;;!              ^
(parameter
  name: (_) @value.leading.endOf
  (equals_value_clause
    (_) @value
  )
) @_.domain

(_
  (parameter_list
    "(" @argumentOrParameter.iteration.start.endOf
    ")" @argumentOrParameter.iteration.end.startOf
  )
) @argumentOrParameter.iteration.domain

(parameter_list
  "(" @name.iteration.start.endOf @value.iteration.start.endOf @type.iteration.start.endOf
  ")" @name.iteration.end.startOf @value.iteration.end.startOf @type.iteration.end.startOf
)

(argument_list
  "(" @argumentOrParameter.iteration.start.endOf
  ")" @argumentOrParameter.iteration.end.startOf
) @argumentOrParameter.iteration.domain

;; Treat interior of all bodies as iteration scopes for `name`, eg
;;!! void foo() {   }
;;!              ***
(_
  body: (_
    .
    "{" @name.iteration.start.endOf @value.iteration.start.endOf @type.iteration.start.endOf
    "}" @name.iteration.end.startOf @value.iteration.end.startOf @type.iteration.end.startOf
    .
  )
)

operator: [
  "->"
  "<"
  "<<"
  "<="
  ">"
  ">="
  ">>"
] @disqualifyDelimiter
(assignment_operator
  [
    "<<="
    ">>="
  ] @disqualifyDelimiter
)
(lambda_expression
  "=>" @disqualifyDelimiter
)
(member_access_expression
  "->" @disqualifyDelimiter
)
