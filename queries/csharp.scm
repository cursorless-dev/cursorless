;; https://github.com/tree-sitter/tree-sitter-c-sharp/blob/master/src/grammar.json

;; Generated by the following command:
;; > curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-c-sharp/master/src/node-types.json \
;;   | jq '.[] | select(.type == "_statement" or .type == "_declaration") | [.subtypes[].type]'
[
  (class_declaration)
  (constructor_declaration)
  (conversion_operator_declaration)
  (delegate_declaration)
  (destructor_declaration)
  (enum_declaration)
  (event_declaration)
  (event_field_declaration)
  (field_declaration)
  (indexer_declaration)
  (interface_declaration)
  (method_declaration)
  (namespace_declaration)
  (operator_declaration)
  (property_declaration)
  (record_declaration)
  (struct_declaration)
  (using_directive)
  (block)
  (break_statement)
  (checked_statement)
  (continue_statement)
  (do_statement)
  (empty_statement)
  (expression_statement)
  (fixed_statement)
  (for_each_statement)
  (for_statement)
  (goto_statement)
  (if_statement)
  (labeled_statement)
  (local_declaration_statement)
  (local_function_statement)
  (lock_statement)
  (return_statement)
  (switch_statement)
  (throw_statement)
  (try_statement)
  (unsafe_statement)
  (using_statement)
  (while_statement)
  (yield_statement)
] @statement

(if_statement) @ifStatement

(
  (compilation_unit) @statement.iteration @class.iteration @className.iteration
  (#document-range! @statement.iteration @class.iteration @className.iteration)
)

(
  (compilation_unit) @name.iteration @namedFunction.iteration @functionName.iteration
  (#document-range! @name.iteration @namedFunction.iteration @functionName.iteration)
)

(_
  body: (_
    "{" @statement.iteration.start.endOf
    "}" @statement.iteration.end.startOf
  )
)

;;!! if () {}
;;!  ^^^^^^^^
(
  (if_statement
    condition: (_) @condition
    consequence: (_) @branch.end.endOf @branch.removal.end.endOf
    alternative: (_)? @branch.removal.end.startOf
  ) @branch.start.startOf @branch.removal.start.startOf @condition.domain
  (#not-parent-type? @condition.domain "if_statement")
)
(
  (if_statement
    consequence: (_
      "{" @interior.start.endOf
      "}" @interior.end.startOf
    ) @interior.domain.end.endOf
  ) @interior.domain.start.startOf
  (#not-parent-type? @interior.domain.start.startOf "if_statement")
)

;;!! else if () {}
;;!  ^^^^^^^^^^^^^
(if_statement
  "else" @branch.start.startOf @interior.domain.start.startOf @condition.domain.start.startOf
  (if_statement
    condition: (_) @condition
    consequence: (_
      "{" @interior.start.endOf
      "}" @interior.end.startOf
    ) @branch.end.endOf @interior.domain.end.endOf @condition.domain.end.endOf
  )
)

;;!! else {}
;;!  ^^^^^^^
(if_statement
  "else" @branch.start @interior.domain.start.startOf
  alternative: (block
    "{" @interior.start.endOf
    "}" @interior.end.startOf
  ) @branch.end @interior.domain.end.endOf
)

;;!! if () {} else if () {} else {}
;;!  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(
  (if_statement) @branch.iteration
  (#not-parent-type? @branch.iteration "if_statement")
)

;;!! try () {}
;;!  ^^^^^^^^^
(try_statement
  body: (_
    "{" @interior.start.endOf
    "}" @interior.end.startOf
  ) @branch.end.endOf @interior.domain.end.endOf
) @branch.start.startOf @interior.domain.start.startOf

;;!! catch () {}
;;!  ^^^^^^^^^^^
(catch_clause) @branch

;;!! finally {}
;;!  ^^^^^^^^^^
(finally_clause
  (block
    "{" @interior.start.endOf
    "}" @interior.end.startOf
  )
) @branch @interior.domain

;;!! try () {} catch () {} finally {}
;;!  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(try_statement) @branch.iteration

[
  (for_statement)
  (for_each_statement)
  (while_statement)
  (do_statement)
] @branch

;;!! foreach (int value in values) {}
;;!               ^^^^^
(for_each_statement
  left: (_) @name
  right: (_) @value
) @_.domain

;;!! true ? 0 : 1;
;;!  ^^^^
;;!         ^   ^
(conditional_expression
  condition: (_) @condition @interior
) @condition.domain
(conditional_expression
  consequence: (_) @branch @interior
)
(conditional_expression
  alternative: (_) @branch @interior
)

;;!! class Foo {}
;;!  ^^^^^^^^^^^^
(class_declaration
  name: (identifier) @className
  body: (_
    "{" @interior.start.endOf
    "}" @interior.end.startOf
  )
) @class @type @_.domain

;; Treat interior of all bodies as iteration scopes for class and classname, eg
;;!! private static void foo() {   }
;;!                             ***
(_
  body: (_
    "{" @class.iteration.start.endOf @className.iteration.start.endOf
    "}" @class.iteration.end.startOf @className.iteration.end.startOf
  )
)

(
  (_
    body: (_
      "{" @interior.start.endOf
      "}" @interior.end.startOf
    )
  ) @_.domain
  (#not-type? @_.domain try_statement)
)

;;!! "Hello world"
(
  (string_literal) @string @textFragment
  (#child-range! @textFragment 0 -1 true true)
)

;;!! @"Hello world"
(
  (verbatim_string_literal) @string @textFragment
  (#character-range! @textFragment 2 -1)
)

;;!! // Hello world
(comment) @comment @textFragment

;;!! () => {};
;;!  ^^^^^^^^
(lambda_expression) @anonymousFunction

;;!! () => 2;
;;!        ^
(lambda_expression
  body: (_) @value @interior
  (#not-type? @value block initializer_expression)
) @_.domain

;;!! return 2;
;;!         ^
(return_statement
  (_) @value
) @_.domain

;;!! yield return 2;
;;!               ^
(yield_statement
  (_) @value
) @_.domain

;;!! [Obsolete("Deprecated")]
;;!   ^^^^^^^^^^^^^^^^^^^^^^
(attribute) @attribute

[
  (delegate_declaration
    name: (_) @functionName
  )
  (local_function_statement
    name: (_) @functionName
  )
  (method_declaration
    name: (_) @functionName
  )
  (constructor_declaration
    name: (_) @functionName
  )
] @namedFunction @functionName.domain

(class_declaration
  body: (_
    "{" @namedFunction.iteration.start.endOf @functionName.iteration.start.endOf
    "}" @namedFunction.iteration.end.startOf @functionName.iteration.end.startOf
  )
)

;;!! void foo() {}
[
  (invocation_expression)
  (object_creation_expression)
] @functionCall

[
  (invocation_expression
    function: (_) @functionCallee
  )
  (object_creation_expression
    "new" @functionCallee.start
    type: (_) @functionCallee.end
  )
] @_.domain

(switch_statement
  (tuple_expression) @private.switchStatementSubject
) @_.domain

(switch_statement
  value: (_) @private.switchStatementSubject
) @_.domain

(_
  condition: (_) @condition
) @_.domain
(while_statement
  .
  (_) @condition
) @_.domain

(do_statement
  (block
    "{" @interior.start.endOf
    "}" @interior.end.startOf
  )
  "while"
  .
  (_) @condition
) @_.domain

;;!! case 0: break;
;;!  ^^^^^^^^^^^^^^
(switch_section) @branch

;;!! case 0: break;
;;!       ^
(switch_section
  (case_switch_label
    .
    (_) @condition
  )
) @_.domain

;;!! default: break;
;;!           ^^^^^^
(switch_section
  [
    (case_switch_label)
    (default_switch_label)
  ]
  .
  (_) @interior.start
  (_)? @interior.end
  .
  (#not-type? @interior.start "block")
) @_.domain

;;!! case 0: { }
;;!           ^
(switch_section
  (block
    "{" @interior.start.endOf
    "}" @interior.end.startOf
  )
) @_.domain

(switch_statement
  body: (switch_body
    "{" @branch.iteration.start.endOf @condition.iteration.start.endOf
    "}" @branch.iteration.end.startOf @condition.iteration.end.startOf
  )
)

(object_creation_expression
  initializer: (_) @map @list
)

(implicit_object_creation_expression
  (initializer_expression) @map
)

(array_creation_expression
  (initializer_expression) @list
)
(implicit_array_creation_expression
  (initializer_expression) @list
)
(implicit_stack_alloc_array_creation_expression
  (initializer_expression) @list
)
(stack_alloc_array_creation_expression
  (initializer_expression) @list
)

;;!! FirstName = "Craig"
;;!  ^^^^^^^^^
(initializer_expression
  (assignment_expression
    left: (_) @collectionKey
  ) @_.domain
)
(initializer_expression
  "{" @collectionKey.iteration.start.endOf @value.iteration.start.endOf
  "}" @collectionKey.iteration.end.startOf @value.iteration.end.startOf
)

;;!! String aaa;
;;!         ^^^
(variable_declaration
  (variable_declarator
    (identifier) @name
  )
) @_.domain

;;!! String aaa = "bbb";
;;!         ^^^
(variable_declaration
  (variable_declarator
    (identifier) @name @value.leading.endOf
    (equals_value_clause
      (_) @value
    )
  )
) @_.domain

(
  (variable_declarator
    (identifier) @name
  ) @_.domain
  (#not-parent-type? @_.domain variable_declaration)
)

(
  (variable_declarator
    (identifier) @name @value.leading.endOf
    (equals_value_clause
      (_) @value
    )
  ) @_.domain
  (#not-parent-type? @_.domain variable_declaration)
)

;;!! aaa = "bbb";
;;!  ^^^
;;!! foo = 2;
;;!        ^
(assignment_expression
  left: (_) @name @value.leading.endOf
  right: (_) @value
) @_.domain

(_
  name: (_) @name
) @_.domain

(
  (_
    type: (_) @type
  ) @_.domain
  (#not-type? @_.domain cast_expression)
)

;;!! (int)5.5;
;;!   ^^^
(cast_expression
  "(" @type.removal.start
  type: (_) @type
  ")" @type.removal.end
) @_.domain

;;!! enum Foo {}
;;!! interface IFoo {}
[
  (enum_declaration)
  (interface_declaration)
] @type

;; Dictionary<string, int> values;
;;!           ^^^^^^  ^^^
(type_argument_list
  (_)? @_.leading.endOf
  .
  (_) @type
  .
  (_)? @_.trailing.startOf
  (#insertion-delimiter! @type ", ")
)

(type_argument_list
  "<" @type.iteration.start.endOf
  ">" @type.iteration.end.startOf
)

;;!! int value = 0;
;;!              ^
(parameter
  name: (_) @value.leading.endOf
  (equals_value_clause
    (_) @value
  )
) @_.domain

;; !! foo(aaa, bbb)
;; !      ^^^  ^^^
(
  (argument_list
    (_)? @_.leading.endOf
    .
    (_) @argumentOrParameter
    .
    (_)? @_.trailing.startOf
  ) @_dummy
  (#not-type? @argumentOrParameter "comment")
  (#single-or-multi-line-delimiter! @argumentOrParameter @_dummy ", " ",\n")
)

;; !! foo(aaa, bbb)
;; !      ^^^^^^^^
(_
  (argument_list
    "(" @argumentList.removal.start.endOf @argumentOrParameter.iteration.start.endOf
    ")" @argumentList.removal.end.startOf @argumentOrParameter.iteration.end.startOf
  ) @argumentList
  (#child-range! @argumentList 1 -2)
  (#empty-single-multi-delimiter! @argumentList @argumentList "" ", " ",\n")
) @argumentList.domain @argumentOrParameter.iteration.domain

;; !! void foo(int a, int b)
;; !           ^^^^^  ^^^^^
(
  (parameter_list
    (_)? @_.leading.endOf
    .
    (_) @argumentOrParameter
    .
    (_)? @_.trailing.startOf
  ) @_dummy
  (#not-type? @argumentOrParameter "comment")
  (#single-or-multi-line-delimiter! @argumentOrParameter @_dummy ", " ",\n")
)

;; !! void foo(int a, int b)
;; !           ^^^^^^^^^^^^
(_
  (parameter_list
    "(" @argumentList.removal.start.endOf @argumentOrParameter.iteration.start.endOf
    ")" @argumentList.removal.end.startOf @argumentOrParameter.iteration.end.startOf
  ) @argumentList
  (#child-range! @argumentList 1 -2)
  (#empty-single-multi-delimiter! @argumentList @argumentList "" ", " ",\n")
) @argumentList.domain @argumentOrParameter.iteration.domain

(parameter_list
  "(" @name.iteration.start.endOf @value.iteration.start.endOf @type.iteration.start.endOf
  ")" @name.iteration.end.startOf @value.iteration.end.startOf @type.iteration.end.startOf
)

;; Treat interior of all bodies as iteration scopes for `name`, eg
;;!! void foo() {   }
;;!              ^^^
(_
  body: (_
    "{" @name.iteration.start.endOf @value.iteration.start.endOf @type.iteration.start.endOf
    "}" @name.iteration.end.startOf @value.iteration.end.startOf @type.iteration.end.startOf
  )
)

operator: [
  "->"
  "<"
  "<<"
  "<="
  ">"
  ">="
  ">>"
] @disqualifyDelimiter
(assignment_operator
  [
    "<<="
    ">>="
  ] @disqualifyDelimiter
)
(lambda_expression
  "=>" @disqualifyDelimiter
)
(member_access_expression
  "->" @disqualifyDelimiter
)
