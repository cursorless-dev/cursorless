;; import c.scm

;; https://github.com/tree-sitter/tree-sitter-cpp/blob/master/src/grammar.json

;; Generated by the following command:
;;  >  curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-cpp/master/src/node-types.json | jq '[.[] | select(.type == "compound_statement") | .children.types[].type] + [.[] | select(.type == "_statement") | .subtypes[].type]'
[
  (alias_declaration)
  (namespace_definition)
  (static_assert_declaration)
  (template_declaration)
  (template_instantiation)
  (using_declaration)
  (for_range_loop)
  (throw_statement)
  (try_statement)
] @statement

(_
  (class_specifier
    name: (_) @className @name
    body: (_)
  ) @_.domain.start @class.start @type.start
  .
  ";"? @_.domain.end @class.end @type.end
)
(_
  (class_specifier
    name: (_)
    body: (_)
  ) @statement.start
  .
  ";"? @statement.end
)

;;!! void ClassName::method() {}
(function_definition
  declarator: (_
    declarator: (_
      scope: (_) @className
    )
  )
) @_.domain

(lambda_expression) @anonymousFunction
(attribute_declaration) @attribute

;; >  curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-cpp/master/src/node-types.json | jq '[.[] | select(.type == "_type_specifier") | .subtypes[].type]'
[
  (auto)
  (decltype)
  (dependent_type)
  (template_type)
] @type

;;!! void foo(int value = 0) {}
;;!               ^^^^^
;;!                       ^
(optional_parameter_declaration
  declarator: (_) @name @value.leading.endOf
  default_value: (_) @value
) @_.domain

(declaration
  type: (_) @functionCallee @functionCall.start @_.domain.start
  declarator: (init_declarator
    value: (argument_list)
  ) @functionCall.end @_.domain.end
)

(trailing_return_type
  "->" @disqualifyDelimiter
)
