fromEither :: (a -> c) -> (b -> c) -> Either a b -> c
fromEither f g x = case x of
    Left  l -> f l
    Right r -> g r

---

[#1 Content] =
[#1 Domain] = 1:11-1:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
             >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#1 Removal] = 1:11-1:13
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
             >--<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#1 Leading delimiter] = 1:10-1:11
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
            >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#1 Trailing delimiter] = 1:12-1:13
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
              >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#1 Insertion delimiter] = " "


[#2 Content] =
[#2 Domain] = 1:13-1:14
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
               >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#2 Removal] = 1:13-1:15
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
               >--<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#2 Leading delimiter] = 1:12-1:13
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
              >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#2 Trailing delimiter] = 1:14-1:15
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
                >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#2 Insertion delimiter] = " "


[#3 Content] =
[#3 Domain] = 1:15-1:16
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
                 >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#3 Removal] = 1:15-1:17
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
                 >--<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#3 Leading delimiter] = 1:14-1:15
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
                >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#3 Trailing delimiter] = 1:16-1:17
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of
                  >-<
2|     Left  l -> f l

3|     Right r -> g r

4|


[#3 Insertion delimiter] = " "


[#4 Content] =
[#4 Domain] = 2:4-2:8
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
      >----<
3|     Right r -> g r

4|


[#4 Removal] = 2:4-2:10
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
      >------<
3|     Right r -> g r

4|


[#4 Leading delimiter] = 2:0-2:4
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
  >----<
3|     Right r -> g r

4|


[#4 Trailing delimiter] = 2:8-2:10
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
          >--<
3|     Right r -> g r

4|


[#4 Insertion delimiter] = " "


[#5 Content] =
[#5 Domain] = 2:4-2:11
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
      >-------<
3|     Right r -> g r

4|


[#5 Removal] = 2:4-2:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
      >--------<
3|     Right r -> g r

4|


[#5 Leading delimiter] = 2:0-2:4
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
  >----<
3|     Right r -> g r

4|


[#5 Trailing delimiter] = 2:11-2:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
             >-<
3|     Right r -> g r

4|


[#5 Insertion delimiter] = " "


[#6 Content] =
[#6 Domain] = 2:10-2:11
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
            >-<
3|     Right r -> g r

4|


[#6 Removal] = 2:10-2:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
            >--<
3|     Right r -> g r

4|


[#6 Leading delimiter] = 2:8-2:10
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
          >--<
3|     Right r -> g r

4|


[#6 Trailing delimiter] = 2:11-2:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
             >-<
3|     Right r -> g r

4|


[#6 Insertion delimiter] = " "


[#7 Content] =
[#7 Domain] = 2:17-2:18
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
                   >-<
3|     Right r -> g r

4|


[#7 Removal] = 2:16-2:18
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
                  >--<
3|     Right r -> g r

4|


[#7 Leading delimiter] = 2:16-2:17
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l
                  >-<
3|     Right r -> g r

4|


[#7 Insertion delimiter] = " "


[#8 Content] =
[#8 Domain] = 3:4-3:9
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
      >-----<
4|


[#8 Removal] = 3:4-3:10
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
      >------<
4|


[#8 Leading delimiter] = 3:0-3:4
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
  >----<
4|


[#8 Trailing delimiter] = 3:9-3:10
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
           >-<
4|


[#8 Insertion delimiter] = " "


[#9 Content] =
[#9 Domain] = 3:4-3:11
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
      >-------<
4|


[#9 Removal] = 3:4-3:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
      >--------<
4|


[#9 Leading delimiter] = 3:0-3:4
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
  >----<
4|


[#9 Trailing delimiter] = 3:11-3:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
             >-<
4|


[#9 Insertion delimiter] = " "


[#10 Content] =
[#10 Domain] = 3:10-3:11
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
            >-<
4|


[#10 Removal] = 3:10-3:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
            >--<
4|


[#10 Leading delimiter] = 3:9-3:10
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
           >-<
4|


[#10 Trailing delimiter] = 3:11-3:12
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
             >-<
4|


[#10 Insertion delimiter] = " "


[#11 Content] =
[#11 Domain] = 3:17-3:18
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
                   >-<
4|


[#11 Removal] = 3:16-3:18
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
                  >--<
4|


[#11 Leading delimiter] = 3:16-3:17
0| fromEither :: (a -> c) -> (b -> c) -> Either a b -> c

1| fromEither f g x = case x of

2|     Left  l -> f l

3|     Right r -> g r
                  >-<
4|


[#11 Insertion delimiter] = " "
