zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith f [] [] = []
zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

---

[#1 Content] =
[#1 Domain] = 0:11-0:24
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
             >-------------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#1 Removal] = 0:11-0:25
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
             >--------------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#1 Leading delimiter] = 0:10-0:11
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
            >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#1 Trailing delimiter] = 0:24-0:25
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                          >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#1 Insertion delimiter] = " "


[#2 Content] =
[#2 Domain] = 0:12-0:13
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
              >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#2 Removal] = 0:12-0:14
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
              >--<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#2 Trailing delimiter] = 0:13-0:14
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
               >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#2 Insertion delimiter] = " "


[#3 Content] =
[#3 Domain] = 0:17-0:18
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                   >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#3 Removal] = 0:17-0:19
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                   >--<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#3 Leading delimiter] = 0:16-0:17
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                  >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#3 Trailing delimiter] = 0:18-0:19
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                    >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#3 Insertion delimiter] = " "


[#4 Content] =
[#4 Domain] = 0:17-0:23
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                   >------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#4 Removal] = 0:16-0:23
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                  >-------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#4 Leading delimiter] = 0:16-0:17
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                  >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#4 Insertion delimiter] = " "


[#5 Content] =
[#5 Domain] = 0:22-0:23
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                        >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#5 Removal] = 0:21-0:23
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                       >--<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#5 Leading delimiter] = 0:21-0:22
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                       >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#5 Insertion delimiter] = " "


[#6 Content] =
[#6 Domain] = 0:28-0:31
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                              >---<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#6 Removal] = 0:28-0:32
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                              >----<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#6 Leading delimiter] = 0:27-0:28
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                             >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#6 Trailing delimiter] = 0:31-0:32
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                 >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#6 Insertion delimiter] = " "


[#7 Content] =
[#7 Domain] = 0:28-0:45
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                              >-----------------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#7 Removal] = 0:27-0:45
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                             >------------------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#7 Leading delimiter] = 0:27-0:28
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                             >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#7 Insertion delimiter] = " "


[#8 Content] =
[#8 Domain] = 0:35-0:38
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                     >---<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#8 Removal] = 0:35-0:39
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                     >----<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#8 Leading delimiter] = 0:34-0:35
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                    >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#8 Trailing delimiter] = 0:38-0:39
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                        >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#8 Insertion delimiter] = " "


[#9 Content] =
[#9 Domain] = 0:35-0:45
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                     >----------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#9 Removal] = 0:34-0:45
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                    >-----------<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#9 Leading delimiter] = 0:34-0:35
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                    >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#9 Insertion delimiter] = " "


[#10 Content] =
[#10 Domain] = 0:42-0:45
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                            >---<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#10 Removal] = 0:41-0:45
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                           >----<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#10 Leading delimiter] = 0:41-0:42
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
                                           >-<
1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#10 Insertion delimiter] = " "


[#11 Content] =
[#11 Domain] = 1:8-1:9
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
          >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#11 Removal] = 1:8-1:10
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
          >--<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#11 Leading delimiter] = 1:7-1:8
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
         >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#11 Trailing delimiter] = 1:9-1:10
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
           >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#11 Insertion delimiter] = " "


[#12 Content] =
[#12 Domain] = 1:10-1:12
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
            >--<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#12 Removal] = 1:10-1:13
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
            >---<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#12 Leading delimiter] = 1:9-1:10
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
           >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#12 Trailing delimiter] = 1:12-1:13
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
              >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#12 Insertion delimiter] = " "


[#13 Content] =
[#13 Domain] = 1:13-1:15
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
               >--<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#13 Removal] = 1:13-1:16
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
               >---<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#13 Leading delimiter] = 1:12-1:13
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
              >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#13 Trailing delimiter] = 1:15-1:16
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []
                 >-<
2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys

3|


[#13 Insertion delimiter] = " "


[#14 Content] =
[#14 Domain] = 2:8-2:9
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
          >-<
3|


[#14 Removal] = 2:8-2:10
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
          >--<
3|


[#14 Leading delimiter] = 2:7-2:8
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
         >-<
3|


[#14 Trailing delimiter] = 2:9-2:10
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
           >-<
3|


[#14 Insertion delimiter] = " "


[#15 Content] =
[#15 Domain] = 2:10-2:18
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
            >--------<
3|


[#15 Removal] = 2:10-2:19
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
            >---------<
3|


[#15 Leading delimiter] = 2:9-2:10
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
           >-<
3|


[#15 Trailing delimiter] = 2:18-2:19
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                    >-<
3|


[#15 Insertion delimiter] = " "


[#16 Content] =
[#16 Domain] = 2:11-2:12
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
             >-<
3|


[#16 Removal] = 2:11-2:13
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
             >--<
3|


[#16 Trailing delimiter] = 2:12-2:13
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
              >-<
3|


[#16 Insertion delimiter] = " "


[#17 Content] =
[#17 Removal] =
[#17 Domain] = 2:11-2:17
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
             >------<
3|


[#17 Insertion delimiter] = " "


[#18 Content] =
[#18 Domain] = 2:15-2:17
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                 >--<
3|


[#18 Removal] = 2:14-2:17
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                >---<
3|


[#18 Leading delimiter] = 2:14-2:15
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                >-<
3|


[#18 Insertion delimiter] = " "


[#19 Content] =
[#19 Domain] = 2:19-2:27
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                     >--------<
3|


[#19 Removal] = 2:19-2:28
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                     >---------<
3|


[#19 Leading delimiter] = 2:18-2:19
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                    >-<
3|


[#19 Trailing delimiter] = 2:27-2:28
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                             >-<
3|


[#19 Insertion delimiter] = " "


[#20 Content] =
[#20 Domain] = 2:20-2:21
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                      >-<
3|


[#20 Removal] = 2:20-2:22
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                      >--<
3|


[#20 Trailing delimiter] = 2:21-2:22
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                       >-<
3|


[#20 Insertion delimiter] = " "


[#21 Content] =
[#21 Removal] =
[#21 Domain] = 2:20-2:26
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                      >------<
3|


[#21 Insertion delimiter] = " "


[#22 Content] =
[#22 Domain] = 2:24-2:26
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                          >--<
3|


[#22 Removal] = 2:23-2:26
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                         >---<
3|


[#22 Leading delimiter] = 2:23-2:24
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                         >-<
3|


[#22 Insertion delimiter] = " "


[#23 Content] =
[#23 Domain] = 2:32-2:33
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                  >-<
3|


[#23 Removal] = 2:32-2:34
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                  >--<
3|


[#23 Leading delimiter] = 2:31-2:32
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                 >-<
3|


[#23 Trailing delimiter] = 2:33-2:34
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                   >-<
3|


[#23 Insertion delimiter] = " "


[#24 Content] =
[#24 Domain] = 2:34-2:35
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                    >-<
3|


[#24 Removal] = 2:34-2:36
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                    >--<
3|


[#24 Leading delimiter] = 2:33-2:34
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                   >-<
3|


[#24 Trailing delimiter] = 2:35-2:36
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                     >-<
3|


[#24 Insertion delimiter] = " "


[#25 Content] =
[#25 Domain] = 2:46-2:47
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                >-<
3|


[#25 Removal] = 2:46-2:48
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                >--<
3|


[#25 Leading delimiter] = 2:45-2:46
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                               >-<
3|


[#25 Trailing delimiter] = 2:47-2:48
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                 >-<
3|


[#25 Insertion delimiter] = " "


[#26 Content] =
[#26 Domain] = 2:48-2:50
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                  >--<
3|


[#26 Removal] = 2:48-2:51
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                  >---<
3|


[#26 Leading delimiter] = 2:47-2:48
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                 >-<
3|


[#26 Trailing delimiter] = 2:50-2:51
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                    >-<
3|


[#26 Insertion delimiter] = " "


[#27 Content] =
[#27 Domain] = 2:51-2:53
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                     >--<
3|


[#27 Removal] = 2:50-2:53
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                    >---<
3|


[#27 Leading delimiter] = 2:50-2:51
0| zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

1| zipWith f [] [] = []

2| zipWith f (x : xs) (y : ys) = f x y : zipWith f xs ys
                                                    >-<
3|


[#27 Insertion delimiter] = " "
