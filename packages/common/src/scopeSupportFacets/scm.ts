import type { LanguageScopeSupportFacetMap } from "./scopeSupportFacets.types";
import { ScopeSupportFacetLevel } from "./scopeSupportFacets.types";

const { supported, notApplicable } = ScopeSupportFacetLevel;

export const scmScopeSupport: LanguageScopeSupportFacetMap = {
  statement: supported,
  list: supported,

  "argument.actual.singleLine": supported,
  "argument.actual.multiLine": supported,
  "argument.actual.iteration": supported,

  "argumentList.actual.empty": supported,
  "argumentList.actual.singleLine": supported,
  "argumentList.actual.multiLine": supported,

  functionCall: supported,
  functionCallee: supported,

  "string.singleLine": supported,
  "comment.line": supported,
  "textFragment.comment.line": supported,
  "textFragment.string.singleLine": supported,

  /* NOT APPLICABLE */

  // Class
  class: notApplicable,
  "class.iteration.block": notApplicable,
  "class.iteration.document": notApplicable,
  "name.class": notApplicable,
  "name.field.class": notApplicable,
  "name.iteration.class": notApplicable,
  "statement.class": notApplicable,
  "statement.field.class": notApplicable,
  "statement.iteration.class": notApplicable,
  "type.class": notApplicable,
  "type.field.class": notApplicable,
  "type.iteration.class": notApplicable,
  "value.field.class": notApplicable,
  "value.iteration.class": notApplicable,
  "interior.class": notApplicable,
  "namedFunction.iteration.class": notApplicable,

  // Interface
  "statement.interface": notApplicable,
  "statement.field.interface": notApplicable,
  "statement.iteration.interface": notApplicable,
  "interior.interface": notApplicable,
  "name.interface": notApplicable,
  "name.field.interface": notApplicable,
  "name.iteration.interface": notApplicable,
  "type.interface": notApplicable,
  "type.field.interface": notApplicable,
  "type.iteration.interface": notApplicable,

  // Enum
  "statement.enum": notApplicable,
  "name.enum": notApplicable,
  "name.field.enum": notApplicable,
  "name.iteration.enum": notApplicable,
  "value.field.enum": notApplicable,
  "value.iteration.enum": notApplicable,
  "type.enum": notApplicable,
  "interior.enum": notApplicable,

  // Command
  command: notApplicable,
  "name.command": notApplicable,
  "value.command": notApplicable,
  "interior.command": notApplicable,

  // Try catch
  "branch.try": notApplicable,
  "branch.try.iteration": notApplicable,
  "interior.try": notApplicable,
  "argument.catch": notApplicable,
  "name.argument.catch": notApplicable,
  "type.argument.catch": notApplicable,

  anonymousFunction: notApplicable,
  "argument.actual.constructor.singleLine": notApplicable,
  "argument.actual.constructor.multiLine": notApplicable,
  "argument.actual.constructor.iteration": notApplicable,
  "argument.actual.method.singleLine": notApplicable,
  "argument.actual.method.multiLine": notApplicable,
  "argument.actual.method.iteration": notApplicable,
  "argument.formal.singleLine": notApplicable,
  "argument.formal.multiLine": notApplicable,
  "argument.formal.constructor.singleLine": notApplicable,
  "argument.formal.constructor.multiLine": notApplicable,
  "argument.formal.constructor.iteration": notApplicable,
  "argument.formal.iteration": notApplicable,
  "argument.formal.method.singleLine": notApplicable,
  "argument.formal.method.multiLine": notApplicable,
  "argument.formal.method.iteration": notApplicable,
  "argument.formal.lambda.singleLine": notApplicable,
  "argument.formal.lambda.multiLine": notApplicable,
  "argument.formal.lambda.iteration": notApplicable,
  "argumentList.actual.method.empty": notApplicable,
  "argumentList.actual.method.singleLine": notApplicable,
  "argumentList.actual.method.multiLine": notApplicable,
  "argumentList.actual.constructor.empty": notApplicable,
  "argumentList.actual.constructor.singleLine": notApplicable,
  "argumentList.actual.constructor.multiLine": notApplicable,
  "argumentList.formal.empty": notApplicable,
  "argumentList.formal.singleLine": notApplicable,
  "argumentList.formal.multiLine": notApplicable,
  "argumentList.formal.lambda.empty": notApplicable,
  "argumentList.formal.lambda.singleLine": notApplicable,
  "argumentList.formal.lambda.multiLine": notApplicable,
  "argumentList.formal.method.empty": notApplicable,
  "argumentList.formal.method.singleLine": notApplicable,
  "argumentList.formal.method.multiLine": notApplicable,
  "argumentList.formal.constructor.empty": notApplicable,
  "argumentList.formal.constructor.singleLine": notApplicable,
  "argumentList.formal.constructor.multiLine": notApplicable,
  attribute: notApplicable,
  "branch.if": notApplicable,
  "branch.if.elif.else": notApplicable,
  "branch.if.else": notApplicable,
  "branch.if.iteration": notApplicable,
  "branch.loop": notApplicable,
  "branch.loop.iteration": notApplicable,
  "branch.switchCase": notApplicable,
  "branch.switchCase.iteration": notApplicable,
  "branch.ternary": notApplicable,
  "branch.ternary.iteration": notApplicable,
  "comment.block": notApplicable,
  "condition.doWhile": notApplicable,
  "condition.for": notApplicable,
  "condition.if": notApplicable,
  "condition.switchCase": notApplicable,
  "condition.switchCase.iteration": notApplicable,
  "condition.ternary": notApplicable,
  "condition.while": notApplicable,
  "collectionItem.unenclosed": notApplicable,
  "collectionItem.unenclosed.iteration": notApplicable,
  disqualifyDelimiter: notApplicable,
  element: notApplicable,
  endTag: notApplicable,
  environment: notApplicable,
  fieldAccess: notApplicable,
  "functionCall.constructor": notApplicable,
  "functionCallee.constructor": notApplicable,
  ifStatement: notApplicable,
  "interior.cell": notApplicable,
  "interior.element": notApplicable,
  "interior.function": notApplicable,
  "interior.constructor": notApplicable,
  "interior.method": notApplicable,
  "interior.if": notApplicable,
  "interior.lambda": notApplicable,
  "interior.for": notApplicable,
  "interior.foreach": notApplicable,
  "interior.while": notApplicable,
  "interior.doWhile": notApplicable,
  "interior.resource": notApplicable,
  "interior.switch": notApplicable,
  "interior.switchCase": notApplicable,
  "interior.ternary": notApplicable,
  "interior.namespace": notApplicable,
  "interior.static": notApplicable,
  "key.attribute": notApplicable,
  "key.mapPair": notApplicable,
  "key.mapPair.iteration": notApplicable,
  map: notApplicable,
  "name.argument.actual": notApplicable,
  "name.argument.actual.iteration": notApplicable,
  "name.argument.formal": notApplicable,
  "name.argument.formal.constructor": notApplicable,
  "name.argument.formal.constructor.iteration": notApplicable,
  "name.argument.formal.iteration": notApplicable,
  "name.argument.formal.method": notApplicable,
  "name.argument.formal.method.iteration": notApplicable,
  "name.assignment": notApplicable,
  "name.assignment.pattern": notApplicable,
  "name.namespace": notApplicable,
  "name.constructor": notApplicable,
  "name.foreach": notApplicable,
  "name.function": notApplicable,
  "name.iteration.block": notApplicable,
  "name.iteration.document": notApplicable,
  "name.method": notApplicable,
  "name.resource": notApplicable,
  "name.resource.iteration": notApplicable,
  "name.variable": notApplicable,
  "name.variable.pattern": notApplicable,
  namedFunction: notApplicable,
  "namedFunction.constructor": notApplicable,
  "namedFunction.iteration.document": notApplicable,
  "namedFunction.method": notApplicable,
  notebookCell: notApplicable,
  pairDelimiter: notApplicable,
  regularExpression: notApplicable,
  section: notApplicable,
  "section.iteration.document": notApplicable,
  "section.iteration.parent": notApplicable,
  startTag: notApplicable,
  "statement.iteration.block": notApplicable,
  "statement.iteration.document": notApplicable,
  "string.multiLine": notApplicable,
  tags: notApplicable,
  "textFragment.comment.block": notApplicable,
  "textFragment.element": notApplicable,
  "textFragment.string.multiLine": notApplicable,
  "type.alias": notApplicable,
  "type.argument.formal": notApplicable,
  "type.argument.formal.constructor": notApplicable,
  "type.argument.formal.constructor.iteration": notApplicable,
  "type.argument.formal.iteration": notApplicable,
  "type.argument.formal.method": notApplicable,
  "type.argument.formal.method.iteration": notApplicable,
  "type.cast": notApplicable,
  "type.foreach": notApplicable,
  "type.variable": notApplicable,
  "type.return": notApplicable,
  "type.resource": notApplicable,
  "type.resource.iteration": notApplicable,
  "type.typeArgument": notApplicable,
  "type.typeArgument.iteration": notApplicable,
  "type.iteration.block": notApplicable,
  "type.iteration.document": notApplicable,
  "value.argument.actual": notApplicable,
  "value.argument.actual.iteration": notApplicable,
  "value.argument.formal": notApplicable,
  "value.argument.formal.constructor": notApplicable,
  "value.argument.formal.constructor.iteration": notApplicable,
  "value.argument.formal.iteration": notApplicable,
  "value.argument.formal.method": notApplicable,
  "value.argument.formal.method.iteration": notApplicable,
  "value.assignment": notApplicable,
  "value.attribute": notApplicable,
  "value.foreach": notApplicable,
  "value.mapPair": notApplicable,
  "value.mapPair.iteration": notApplicable,
  "value.resource": notApplicable,
  "value.resource.iteration": notApplicable,
  "value.return": notApplicable,
  "value.return.lambda": notApplicable,
  "value.typeAlias": notApplicable,
  "value.variable": notApplicable,
  "value.variable.pattern": notApplicable,
  "value.yield": notApplicable,
  "value.switch": notApplicable,
  "value.iteration.block": notApplicable,
  "value.iteration.document": notApplicable,
  selector: notApplicable,
  unit: notApplicable,
};
