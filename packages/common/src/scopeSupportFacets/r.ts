import type { LanguageScopeSupportFacetMap } from "./scopeSupportFacets.types";
import { ScopeSupportFacetLevel } from "./scopeSupportFacets.types";

const { supported, unsupported, notApplicable } = ScopeSupportFacetLevel;

export const rScopeSupport: LanguageScopeSupportFacetMap = {
  anonymousFunction: supported,
  "argument.actual": supported,
  "argument.formal": supported,
  "argumentList.formal": supported,
  "argument.actual.iteration": supported,
  "argument.formal.iteration": supported,
  "comment.line": supported,
  functionCall: supported,
  functionCallee: supported,
  functionName: supported,
  ifStatement: supported,
  "name.assignment": supported,
  "name.variable": supported,
  namedFunction: supported,
  "value.assignment": supported,
  "value.variable": supported,

  // Unsupported

  "branch.if": unsupported,
  "branch.if.iteration": unsupported,
  "branch.loop": unsupported,
  "branch.switchCase": unsupported,
  "branch.switchCase.iteration": unsupported,
  "branch.ternary": unsupported,
  "branch.try": unsupported,
  "branch.try.iteration": unsupported,
  "condition.for": unsupported,
  "condition.if": unsupported,
  "condition.ternary": unsupported,
  "condition.while": unsupported,
  "interior.class": unsupported,
  "interior.function": unsupported,
  "interior.if": unsupported,
  "interior.lambda": unsupported,
  "interior.try": unsupported,
  "key.attribute": unsupported,
  "name.class": unsupported,
  "name.field": unsupported,
  "name.foreach": unsupported,
  "name.function": unsupported,
  "name.method": unsupported,
  "statement.class": unsupported,
  "string.multiLine": unsupported,
  "string.singleLine": unsupported,
  "value.attribute": unsupported,
  "value.foreach": unsupported,
  "value.return": unsupported,
  attribute: unsupported,
  class: unsupported,
  className: unsupported,
  environment: unsupported,
  fieldAccess: unsupported,
  map: unsupported,
  regularExpression: unsupported,
  switchStatementSubject: unsupported,

  // Not applicable

  "interior.cell": notApplicable,
  "interior.command": notApplicable,
  "interior.element": notApplicable,
  "name.assignment.pattern": notApplicable,
  // Not applicable for base language but might be useful for markdown or quarto
  "section.iteration.document": notApplicable,
  "section.iteration.parent": notApplicable,
  "type.alias": notApplicable,
  "type.argument.formal": notApplicable,
  "type.argument.formal.constructor": notApplicable,
  "type.argument.formal.constructor.iteration": notApplicable,
  "type.argument.formal.iteration": notApplicable,
  "type.argument.formal.method": notApplicable,
  "type.argument.formal.method.iteration": notApplicable,
  "type.cast": notApplicable,
  "type.class": notApplicable,
  "type.enum": notApplicable,
  "type.field": notApplicable,
  "type.field.iteration": notApplicable,
  "type.foreach": notApplicable,
  "type.interface": notApplicable,
  "type.resource": notApplicable,
  "type.resource.iteration": notApplicable,
  "type.return": notApplicable,
  "type.typeArgument": notApplicable,
  "type.typeArgument.iteration": notApplicable,
  "type.variable": notApplicable,
  "value.typeAlias": notApplicable,
  "value.variable.pattern": notApplicable,
  command: notApplicable,
  element: notApplicable,
  endTag: notApplicable,
  notebookCell: notApplicable,
  section: notApplicable,
  startTag: notApplicable,
  tags: notApplicable,
};
