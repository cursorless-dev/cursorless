import type { LanguageScopeSupportFacetMap } from "./scopeSupportFacets.types";
import { ScopeSupportFacetLevel } from "./scopeSupportFacets.types";

const { supported, notApplicable } = ScopeSupportFacetLevel;

export const htmlScopeSupport: LanguageScopeSupportFacetMap = {
  element: supported,
  tags: supported,
  startTag: supported,
  endTag: supported,
  attribute: supported,
  "key.attribute": supported,
  "value.attribute": supported,
  "comment.block": supported,

  "argument.actual": notApplicable,
  "argument.actual.iteration": notApplicable,
  "argument.formal": notApplicable,
  "argument.formal.iteration": notApplicable,
  "branch.if": notApplicable,
  "branch.switchCase": notApplicable,
  "branch.try": notApplicable,
  "comment.line": notApplicable,
  "condition.doWhile": notApplicable,
  "condition.for": notApplicable,
  "condition.if": notApplicable,
  "condition.switchCase": notApplicable,
  "condition.ternary": notApplicable,
  "condition.while": notApplicable,
  "functionCall.constructor": notApplicable,
  "functionCallee.constructor": notApplicable,
  "key.mapPair.iteration": notApplicable,
  "key.mapPair": notApplicable,
  "name.assignment": notApplicable,
  "name.class": notApplicable,
  "name.field": notApplicable,
  "name.foreach": notApplicable,
  "name.function": notApplicable,
  "namedFunction.method": notApplicable,
  "string.multiLine": notApplicable,
  "string.singleLine": notApplicable,
  "type.variable": notApplicable,
  "type.field": notApplicable,
  "type.foreach": notApplicable,
  "type.argument.formal": notApplicable,
  "type.interface": notApplicable,
  "type.return": notApplicable,
  "value.assignment": notApplicable,
  "value.field": notApplicable,
  "value.foreach": notApplicable,
  "value.mapPair.iteration": notApplicable,
  "value.mapPair": notApplicable,
  "value.return.lambda": notApplicable,
  "value.return": notApplicable,
  anonymousFunction: notApplicable,
  class: notApplicable,
  className: notApplicable,
  command: notApplicable,
  fieldAccess: notApplicable,
  functionCall: notApplicable,
  functionCallee: notApplicable,
  functionName: notApplicable,
  ifStatement: notApplicable,
  list: notApplicable,
  map: notApplicable,
  namedFunction: notApplicable,
  regularExpression: notApplicable,
  statement: notApplicable,
  switchStatementSubject: notApplicable,
};
